##these load all the programs used
suppressPackageStartupMessages(library("DESeq2"))
suppressPackageStartupMessages(library("vsn"))
suppressPackageStartupMessages(library("dplyr"))
suppressPackageStartupMessages(library("ggplot2"))
suppressPackageStartupMessages(library("pheatmap"))
suppressPackageStartupMessages(library("RColorBrewer"))
suppressPackageStartupMessages(library("PoiClaClu"))
suppressPackageStartupMessages(library("ggbeeswarm"))
suppressPackageStartupMessages(library("genefilter"))
suppressPackageStartupMessages(library("sva"))
suppressPackageStartupMessages(library("ggrepel"))
suppressPackageStartupMessages(library("plotly"))
countData <- as.matrix(read.csv("/media/sf_AIDD/Results/DESeq2/gene/counts/gene_count_matrixedited.csv", row.names="gene_name"))
colData <- read.csv("/media/sf_AIDD/PHENO_DATA.csv", row.names=1)
print("do all your row names and colnames match with the PHENO_DATA file")
all(rownames(colData) %in% colnames(countData))
countData <- countData[, rownames(colData)]
print("after renaming columns with PHENO_DATA file do they still match")
all(rownames(colData) == colnames(countData))
dds <- DESeqDataSetFromMatrix(countData = countData,â€ƒcolData = colData, design = ~ condition)
print("total rows in new matrix")
nrow(dds)
dds <- dds[ rowSums(counts(dds)) > 1, ]
print("total number of rows with counts greater then 1")
nrow(dds)
tiff("/media/sf_AIDD/Results/DESeq2/gene/calibration/rlogandvariance.tiff")
lambda <- 10^seq(from = -1, to = 2, length = 1000)
cts <- matrix(rpois(1000*100, lambda), ncol = 100)
meanSdPlot(cts, ranks = FALSE)
dev.off()
tiff("/media/sf_AIDD/Results/DESeq2/gene/calibration/logtranscounts.tiff")
log.cts.one <- log2(cts + 1)
meanSdPlot(log.cts.one, ranks = FALSE)
dev.off()
print("Taking rlog of counts for downstream analysis")
rld <- rlog(dds, blind = FALSE)
print("Top three rows from new log matrix")
head(assay(rld), 3)
vsd <- vst(dds, blind = FALSE)
print("Further processing vst of new log matrix")
head(assay(vsd), 3)
dds <- estimateSizeFactors(dds)
df <- bind_rows(as_data_frame(log2(counts(dds)[, 1:2]+1)) %>% mutate(transformation = "log2(x + 1)"), as_data_frame(assay(rld)[, 1:2]) %>% mutate(transformation = "rlog"), as_data_frame(assay(vsd)[, 1:2]) %>% mutate(transformation = "vst"))
colnames(df)[1:2] <- c("x", "y")
tiff("/media/sf_AIDD/Results/DESeq2/gene/calibration/transcounts2sam.tiff")
ggplot(df, aes(x = x, y = y)) + geom_hex(bins = 80) + coord_fixed() + facet_grid( . ~ transformation)
dev.off()
sampleDists <- dist(t(assay(rld)))
sampleDists
sampleDistMatrix <- as.matrix( sampleDists )
rownames(sampleDistMatrix) <- paste( rld$condition)
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
poisd <- PoissonDistance(t(counts(dds)))
samplePoisDistMatrix <- as.matrix( poisd$dd )
rownames(samplePoisDistMatrix) <- paste( rld$condition)
colnames(samplePoisDistMatrix) <- NULL
tiff("/media/sf_AIDD/Results/DESeq2/gene/calibration/PoisHeatmap.tiff")
pheatmap(samplePoisDistMatrix, clustering_distance_rows = poisd$dd, clustering_distance_cols = poisd$dd, col = colors)
dev.off()
tiff("/media/sf_AIDD/Results/DESeq2/gene/PCA/PCAplot.tiff")
plotPCA(rld, intgroup = c("condition"))
dev.off()
pcaData <- plotPCA(rld, intgroup = c( "condition"), returnData = TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
tiff("/media/sf_AIDD/Results/DESeq2/gene/PCA/PCAplot2.tiff")
ggplot(pcaData, aes(x = PC1, y = PC2, color = condition, group = condition, label=rownames(pcaData))) + geom_point(size = 0) + xlab(paste0("PC1: ", percentVar[1], "% variance")) + ylab(paste0("PC2: ", percentVar[2], "% variance")) + coord_fixed() +geom_text(aes(label=rownames(pcaData)))
dev.off()
mds <- as.data.frame(colData(rld))  %>% cbind(cmdscale(sampleDistMatrix))
tiff("/media/sf_AIDD/Results/DESeq2/gene/PCA/MDSplot.tiff")
ggplot(mds, aes(x = `1`, y = `2`, color = condition)) + geom_point(size = 3) + coord_fixed()
dev.off()
mdsPois <- as.data.frame(colData(dds)) %>% cbind(cmdscale(samplePoisDistMatrix))
tiff("/media/sf_AIDD/Results/DESeq2/gene/PCA/MDSpois.tiff")
ggplot(mdsPois, aes(x = `1`, y = `2`, color = condition)) + geom_point(size = 3) + coord_fixed()
dev.off()
print("Running DESeq2 command")
dds <- DESeq(dds)
res <- results(dds)
mcols(res, use.names = TRUE)
colnames(res)[1] <- "gene_name" 
write.csv(res, "/media/sf_AIDD/Results/DESeq2/gene/differential_expression/resultsall.csv")
resSig <- subset(res, padj < 0.1)
resSigdown <- resSig[ order(resSig$log2FoldChange), ]
write.csv(resSigdown, "/media/sf_AIDD/Results/DESeq2/gene/differential_expression/Downreg.csv")
resSigup <- resSig[ order(resSig$log2FoldChange, decreasing = TRUE), ]
write.csv(resSigup, "/media/sf_AIDD/Results/DESeq2/gene/differential_expression/Upreg.csv")
topVarGenes <- head(order(rowVars(assay(rld)), decreasing = TRUE), 60)
mat  <- assay(rld)[ topVarGenes, ]
mat  <- mat - rowMeans(mat)
anno <- as.data.frame(colData(rld)[, c("condition")])
rownames(anno) <- colData[,4]
colnames(anno) <- "gene_name"
tiff("/media/sf_AIDD/Results/DESeq2/gene/counts/top60heatmap.tiff")
pheatmap(mat, annotation_col = anno, annotation_legend=FALSE, fontsize_row=6)
dev.off()
res <- read.csv("/media/sf_AIDD/Results/DESeq2/gene/differential_expression/resultsall.csv")
colnames(res)[1] <- "gene_name"
colnames(res)[2] <- "base mean"
countData <- read.csv("/media/sf_AIDD/Results/DESeq2/gene/counts/gene_count_matrixedited.csv")
final <- merge(res, countData, by="gene_name")
write.csv(final, "/media/sf_AIDD/Results/DESeq2/gene/differential_expression/finalResults.csv", row.names=FALSE)
goi <- read.csv("/media/sf_AIDD/gene_list/DESeq2/GOI.csv")
goifinal <- merge(goi, final, by="gene_name")
write.csv(goifinal, "/media/sf_AIDD/Results/DESeq2/gene/differential_expression/goifinalresults.csv", row.names=FALSE)
excitome <- read.csv("/media/sf_AIDD/gene_list/DESeq2/excitome.csv")
colnames(final)[1] <- "excitome_name"
excitomefinal <- merge(excitome, final, by="excitome_name")
write.csv(goifinal, "/media/sf_AIDD/Results/DESeq2/gene/differential_expression/excitomefinalresults.csv", row.names=FALSE)
gene_list <- read.csv("/media/sf_AIDD/Results/DESeq2/gene/differential_expression/resultsall.csv", row.names=1)
threshold_OE <- gene_list$padj < 0.05 
length(which(threshold_OE))
gene_list$threshold <- threshold_OE
res_tableOE_ordered <- gene_list[order(gene_list$padj), ] 
res_tableOE_ordered$genelabels <- ""
res_tableOE_ordered$genelabels[1:10] <- rownames(res_tableOE_ordered)[1:10]
tiff("/media/sf_AIDD/Results/DESeq2/gene/differential_expression/VolcanoPlotZika.tiff")
volc = ggplot(res_tableOE_ordered, aes(log2FoldChange, -log10(padj))) + geom_point(aes(x = log2FoldChange, y = -log10(padj), colour = threshold)) + ggtitle("Differential Expression Volcano Plot") + xlab("log2 fold change") + ylab("-log10 adjusted p-value") 
volc + geom_text_repel(data=head(res_tableOE_ordered, 10), aes(label = genelabels)) 
dev.off()
sessionInfo()

