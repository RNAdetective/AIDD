library(gdata)
library(topGO)
library(VennDiagram)
library(ggplot2)
setwd("/media/sf_AIDD/Results/variant_calling/haplotype/gene/high_impact/topGO/")
## still need to create condition_1HIGHunique.csv and condition_2HIGHunique.csv and Moderate set.  This needs to be created from /media/sf_AIDD/Results/variant_calling/haplotype/gene and ~/transcript
geneID2GO <- readMappings(file = "annotations2.csv", sep = ",")
geneUniverse <- names(geneID2GO)
genesOfInterest <- read.table("condition_1HIGH.csv", header=FALSE)
genesOfInterest <- as.character(genesOfInterest$V1)
geneList <- factor(as.integer(geneUniverse %in% genesOfInterest))
names(geneList) <- geneUniverse
geneUniverse <- gsub("\\\"", "", geneUniverse)
myGOdata <- new("topGOdata", description="My AML project", ontology="BP", allGenes=geneList, annot = annFUN.gene2GO, gene2GO = geneID2GO)
myGOdata
sg <- sigGenes(myGOdata)
str(sg)
numSigGenes(myGOdata)
resultFisher <- runTest(myGOdata, algorithm="classic",statistic="fisher")
resultKS <- runTest(myGOdata, algorithm = "classic", statistic = "ks")
resultFisher2 <- runTest(myGOdata, algorithm = "weight01", statistic="fisher")
resultKS.elim <- runTest(myGOdata, algorithm = "elim", satistic = "ks")
allRes <- GenTable(myGOdata,classicFisher=resultFisher,orderBy="resultFisher",ranksOf="classicFisher",topNodes=10)
write.csv(allRes, "condition_1HIGH.csv", row.names=FALSE)
showSigOfNodes(myGOdata,score(resultFisher),firstSigNodes=10,useInfo='all')
printGraph(myGOdata,resultFisher,firstSigNodes=5,fn.prefix="VCNormal",useInfo="all",pdfSW=TRUE)
dev.off()
length(usedGO(myGOdata))
setwd("/media/sf_AIDD/Results/variant_calling/haplotype/gene/high_impact/topGO/")
geneID2GO <- readMappings(file = "annotations2.csv", sep = ",")
geneUniverse <- names(geneID2GO)
genesOfInterest <- read.table("condition_2HIGH.csv", header=FALSE)
genesOfInterest <- as.character(genesOfInterest$V1)
geneList <- factor(as.integer(geneUniverse %in% genesOfInterest))
names(geneList) <- geneUniverse
geneUniverse <- gsub("\\\"", "", geneUniverse)
myGOdata <- new("topGOdata", description="My AML project", ontology="BP", allGenes=geneList, annot = annFUN.gene2GO, gene2GO = geneID2GO)
myGOdata
sg <- sigGenes(myGOdata)
str(sg)
numSigGenes(myGOdata)
resultFisher <- runTest(myGOdata, algorithm="classic",statistic="fisher")
resultKS <- runTest(myGOdata, algorithm = "classic", statistic = "ks")
resultFisher2 <- runTest(myGOdata, algorithm = "weight01", statistic="fisher")
resultKS.elim <- runTest(myGOdata, algorithm = "elim", satistic = "ks")
allRes <- GenTable(myGOdata,classicFisher=resultFisher,orderBy="resultFisher",ranksOf="classicFisher",topNodes=10)
write.csv(allRes, "condition_2HIGH.csv", row.names=FALSE)
showSigOfNodes(myGOdata,score(resultFisher),firstSigNodes=10,useInfo='all')
printGraph(myGOdata,resultFisher,firstSigNodes=5,fn.prefix="VCAML",useInfo="all",pdfSW=TRUE)
dev.off()
length(usedGO(myGOdata))
setwd("/media/sf_AIDD/Results/variant_calling/haplotype/gene/high_impact/topGO/")
geneID2GO <- readMappings(file = "annotations2.csv", sep = ",")
geneUniverse <- names(geneID2GO)
genesOfInterest <- read.table("differencesHIGH.csv", header=FALSE)
genesOfInterest <- as.character(genesOfInterest$V1)
geneList <- factor(as.integer(geneUniverse %in% genesOfInterest))
names(geneList) <- geneUniverse
geneUniverse <- gsub("\\\"", "", geneUniverse)
myGOdata <- new("topGOdata", description="My AML project", ontology="BP", allGenes=geneList, annot = annFUN.gene2GO, gene2GO = geneID2GO)
myGOdata
sg <- sigGenes(myGOdata)
str(sg)
numSigGenes(myGOdata)
resultFisher <- runTest(myGOdata, algorithm="classic",statistic="fisher")
resultKS <- runTest(myGOdata, algorithm = "classic", statistic = "ks")
resultFisher2 <- runTest(myGOdata, algorithm = "weight01", statistic="fisher")
resultKS.elim <- runTest(myGOdata, algorithm = "elim", satistic = "ks")
allRes <- GenTable(myGOdata,classicFisher=resultFisher,orderBy="resultFisher",ranksOf="classicFisher",topNodes=10)
write.csv(allRes, "differencesHIGHtopGO.csv", row.names=FALSE)
showSigOfNodes(myGOdata,score(resultFisher),firstSigNodes=10,useInfo='all')
printGraph(myGOdata,resultFisher,firstSigNodes=5,fn.prefix="VCAML",useInfo="all",pdfSW=TRUE)
dev.off()
length(usedGO(myGOdata))
setwd("/media/sf_AIDD/Results/variant_calling/haplotype/gene/moderate_impact/topGO/")
geneID2GO <- readMappings(file = "annotations2.csv", sep = ",")
geneUniverse <- names(geneID2GO)
genesOfInterest <- read.table("condition_1Moderate.csv", header=FALSE)
genesOfInterest <- as.character(genesOfInterest$V1)
geneList <- factor(as.integer(geneUniverse %in% genesOfInterest))
names(geneList) <- geneUniverse
geneUniverse <- gsub("\\\"", "", geneUniverse)
myGOdata <- new("topGOdata", description="My AML project", ontology="BP", allGenes=geneList, annot = annFUN.gene2GO, gene2GO = geneID2GO)
myGOdata
sg <- sigGenes(myGOdata)
str(sg)
numSigGenes(myGOdata)
resultFisher <- runTest(myGOdata, algorithm="classic",statistic="fisher")
resultKS <- runTest(myGOdata, algorithm = "classic", statistic = "ks")
resultFisher2 <- runTest(myGOdata, algorithm = "weight01", statistic="fisher")
resultKS.elim <- runTest(myGOdata, algorithm = "elim", satistic = "ks")
allRes <- GenTable(myGOdata,classicFisher=resultFisher,orderBy="resultFisher",ranksOf="classicFisher",topNodes=10)
write.csv(allRes, "condition_1Moderate.csv", row.names=FALSE)
showSigOfNodes(myGOdata,score(resultFisher),firstSigNodes=10,useInfo='all')
printGraph(myGOdata,resultFisher,firstSigNodes=5,fn.prefix="VCAML",useInfo="all",pdfSW=TRUE)
dev.off()
length(usedGO(myGOdata))
setwd("/media/sf_AIDD/Results/variant_calling/haplotype/gene/moderate_impact/topGO/")
geneID2GO <- readMappings(file = "annotations2.csv", sep = ",")
geneUniverse <- names(geneID2GO)
genesOfInterest <- read.table("condition_2Moderate.csv", header=FALSE)
genesOfInterest <- as.character(genesOfInterest$V1)
geneList <- factor(as.integer(geneUniverse %in% genesOfInterest))
names(geneList) <- geneUniverse
geneUniverse <- gsub("\\\"", "", geneUniverse)
myGOdata <- new("topGOdata", description="My AML project", ontology="BP", allGenes=geneList, annot = annFUN.gene2GO, gene2GO = geneID2GO)
myGOdata
sg <- sigGenes(myGOdata)
str(sg)
numSigGenes(myGOdata)
resultFisher <- runTest(myGOdata, algorithm="classic",statistic="fisher")
resultKS <- runTest(myGOdata, algorithm = "classic", statistic = "ks")
resultFisher2 <- runTest(myGOdata, algorithm = "weight01", statistic="fisher")
resultKS.elim <- runTest(myGOdata, algorithm = "elim", satistic = "ks")
allRes <- GenTable(myGOdata,classicFisher=resultFisher,orderBy="resultFisher",ranksOf="classicFisher",topNodes=10)
write.csv(allRes, "condition_2Moderate.csv", row.names=FALSE)
showSigOfNodes(myGOdata,score(resultFisher),firstSigNodes=10,useInfo='all')
printGraph(myGOdata,resultFisher,firstSigNodes=5,fn.prefix="VCAML",useInfo="all",pdfSW=TRUE)
dev.off()
length(usedGO(myGOdata))
setwd("/media/sf_AIDD/Results/variant_calling/haplotype/gene/moderate_impact/topGO/")
geneID2GO <- readMappings(file = "annotations2.csv", sep = ",")
geneUniverse <- names(geneID2GO)
genesOfInterest <- read.table("differencesModerate.csv", header=FALSE)
genesOfInterest <- as.character(genesOfInterest$V1)
geneList <- factor(as.integer(geneUniverse %in% genesOfInterest))
names(geneList) <- geneUniverse
geneUniverse <- gsub("\\\"", "", geneUniverse)
myGOdata <- new("topGOdata", description="My AML project", ontology="BP", allGenes=geneList, annot = annFUN.gene2GO, gene2GO = geneID2GO)
myGOdata
sg <- sigGenes(myGOdata)
str(sg)
numSigGenes(myGOdata)
resultFisher <- runTest(myGOdata, algorithm="classic",statistic="fisher")
resultKS <- runTest(myGOdata, algorithm = "classic", statistic = "ks")
resultFisher2 <- runTest(myGOdata, algorithm = "weight01", statistic="fisher")
resultKS.elim <- runTest(myGOdata, algorithm = "elim", satistic = "ks")
allRes <- GenTable(myGOdata,classicFisher=resultFisher,orderBy="resultFisher",ranksOf="classicFisher",topNodes=10)
write.csv(allRes, "differencesModerate.csv", row.names=FALSE)
showSigOfNodes(myGOdata,score(resultFisher),firstSigNodes=10,useInfo='all')
printGraph(myGOdata,resultFisher,firstSigNodes=5,fn.prefix="VCAML",useInfo="all",pdfSW=TRUE)
dev.off()
length(usedGO(myGOdata))
