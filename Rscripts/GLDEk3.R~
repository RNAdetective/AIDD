##these load all the programs used
library("DESeq2")
library("vsn")
library("dplyr")
library("ggplot2")
library("pheatmap")
library("RColorBrewer")
library("PoiClaClu")
library("ggbeeswarm")
library("genefilter")
library("sva")
table1 <- read.csv("gene_count_matrix.csv")
table2 <- read.csv("g_names.csv")
Data <- read.csv("PHENO_DATAk3.csv", row.names=1)
table3 <- merge(table2, table1, by="gene_id")
table4 <- table3$gene_id <- NULL
table5 <- colnames(table3)[c(2:19)] <- rownames(Data)[c(1:18)]
write.csv(table3, "gene_count_matrixedited.csv", row.names=FALSE)
countData <- as.matrix(read.csv("gene_count_matrixedited.csv", row.names="gene_name"))
colData <- read.csv("PHENO_DATAk3.csv", row.names=1)
print("do all your row names and colnames match with the PHENO_DATA file")
all(rownames(colData) %in% colnames(countData))
countData <- countData[, rownames(colData)]
print("after renaming columns with PHENO_DATA file do they still match")
all(rownames(colData) == colnames(countData))
dds <- DESeqDataSetFromMatrix(countData = countData,â€ƒcolData = colData, design = ~ condition + cell + condition:cell)
print("total rows in new matrix")
nrow(dds)
dds <- dds[ rowSums(counts(dds)) > 1, ]
print("total number of rows with counts greater then 1")
nrow(dds)
tiff("rlogandvariance.tiff")
lambda <- 10^seq(from = -1, to = 2, length = 1000)
cts <- matrix(rpois(1000*100, lambda), ncol = 100)
meanSdPlot(cts, ranks = FALSE)
dev.off()
tiff("logtranscounts.tiff")
log.cts.one <- log2(cts + 1)
meanSdPlot(log.cts.one, ranks = FALSE)
dev.off()
print("Taking rlog of counts for downstream analysis")
rld <- rlog(dds, blind = FALSE)
print("Top three rows from new log matrix")
head(assay(rld), 3)
vsd <- vst(dds, blind = FALSE)
print("Further processing vst of new log matrix")
head(assay(vsd), 3)
dds <- estimateSizeFactors(dds)
df <- bind_rows(as_data_frame(log2(counts(dds, normalized=TRUE)[, 1:2]+1)) %>% mutate(transformation = "log2(x + 1)"), as_data_frame(assay(rld)[, 1:2]) %>% mutate(transformation = "rlog"), as_data_frame(assay(vsd)[, 1:2]) %>% mutate(transformation = "vst"))
colnames(df)[1:2] <- c("x", "y")
tiff("transcounts2sam.tiff")
ggplot(df, aes(x = x, y = y)) + geom_hex(bins = 80) + coord_fixed() + facet_grid( . ~ transformation)
dev.off()
sampleDists <- dist(t(assay(rld)))
sampleDists
write.csv(sampleDists, "sampleDist.csv", row.names=FALSE)
sampleDistMatrix <- as.matrix( sampleDists )
rownames(sampleDistMatrix) <- paste( rld$condition)
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
poisd <- PoissonDistance(t(counts(dds)))
samplePoisDistMatrix <- as.matrix( poisd$dd )
rownames(samplePoisDistMatrix) <- paste( rld$condition)
colnames(samplePoisDistMatrix) <- NULL
write.csv(samplePoisDistMatrix, "PoisDistMatrix.csv", row.names=FALSE)
tiff("PoisHeatmap.tiff")
pheatmap(samplePoisDistMatrix, clustering_distance_rows = poisd$dd, clustering_distance_cols = poisd$dd, col = colors)
dev.off()
tiff("PCAplot.tiff")
plotPCA(rld, intgroup = c("condition", "cell"))
dev.off()
pcaData <- plotPCA(rld, intgroup = c( "condition", "cell"), returnData = TRUE)
print("new pcaData matrix for creating PCAplots")
pcaData
write.csv(pcaData, "PCAData.csv", row.names=FALSE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
tiff("PCAplot2.tiff")
ggplot(pcaData, aes(x = PC1, y = PC2, color = cell, shape=condition, group = condition, label=rownames(pcaData))) + geom_point(size = 4) + xlab(paste0("PC1: ", percentVar[1], "% variance")) + ylab(paste0("PC2: ", percentVar[2], "% variance")) + coord_fixed() ##+geom_text(aes(label=rownames(pcaData)))
dev.off()
mds <- as.data.frame(colData(rld))  %>% cbind(cmdscale(sampleDistMatrix))
write.csv(mds, "MDS.csv", row.names=FALSE)
tiff("MDSplot.tiff")
ggplot(mds, aes(x = `1`, y = `2`, color = condition)) + geom_point(size = 3) + coord_fixed()
dev.off()
mdsPois <- as.data.frame(colData(dds)) %>% cbind(cmdscale(samplePoisDistMatrix))
write.csv(mdsPois, "mdsPois.csv", row.names=FALSE)
tiff("MDSpois.tiff")
ggplot(mdsPois, aes(x = `1`, y = `2`, color = condition)) + geom_point(size = 3) + coord_fixed()
dev.off()
print("Running DESeq2 command")
dds <- DESeq(dds)
tiff("ADAR1counts.tiff")
plotCounts(dds, gene = "ADAR", intgroup=c("condition", "cell"))
dev.off()
geneCounts <- plotCounts(dds, gene = "ADAR", intgroup = c("condition", "cell"), returnData = TRUE)
tiff("ADAR1counts2.tiff")
ggplot(geneCounts, aes(x = cell, y = count, color = condition, shape=cell)) + scale_y_log10() +  geom_beeswarm(cex = 3) + geom_point(size = 3)
dev.off()
geneCounts <- plotCounts(dds, gene = "ADAR", intgroup = c("condition", "cell"), returnData = TRUE)
tiff("ADAR1counts3_2.tiff")
ggplot(geneCounts, aes(x = condition, y = count, color = cell, shape=condition, group = cell, label=rownames(pcaData))) + scale_y_log10() +  geom_beeswarm(cex = 3) + geom_point(size = 3) + geom_line()
dev.off()
tiff("ADARB1counts.tiff")
plotCounts(dds, gene = "ADARB1", intgroup=c("condition", "cell"))
dev.off()
geneCounts <- plotCounts(dds, gene = "ADARB1", intgroup = c("condition", "cell"), returnData = TRUE)
tiff("ADARB1counts2.tiff")
ggplot(geneCounts, aes(x = cell, y = count, color = condition)) + scale_y_log10() +  geom_beeswarm(cex = 3) + geom_point(size = 3)
dev.off()
geneCounts <- plotCounts(dds, gene = "ADARB1", intgroup = c("condition", "cell"), returnData = TRUE)
tiff("ADARB1counts3.tiff")
ggplot(geneCounts, aes(x = condition, y = count, color = cell, shape=condition, group = cell, label=rownames(pcaData))) + scale_y_log10() +  geom_beeswarm(cex = 3) + geom_point(size = 3) + geom_line()
dev.off()
tiff("ADARB2counts.tiff")
plotCounts(dds, gene = "ADARB2", intgroup=c("condition", "cell"))
dev.off()
geneCounts <- plotCounts(dds, gene = "ADARB2", intgroup = c("condition", "cell"), returnData = TRUE)
tiff("ADARB2counts2.tiff")
ggplot(geneCounts, aes(x = cell, y = count, color = condition)) + scale_y_log10() +  geom_beeswarm(cex = 3) + geom_point(size = 3)
dev.off()
geneCounts <- plotCounts(dds, gene = "ADARB2", intgroup = c("condition", "cell"), returnData = TRUE)
tiff("ADARB2counts3.tiff")
ggplot(geneCounts, aes(x = condition, y = count, color = cell, shape=condition, group = cell, label=rownames(pcaData))) + scale_y_log10() +  geom_beeswarm(cex = 3) + geom_point(size = 3) + geom_line()
dev.off()
tiff("VEGFAcounts.tiff")
plotCounts(dds, gene = "VEGFA", intgroup=c("condition", "cell"))
dev.off()
geneCounts <- plotCounts(dds, gene = "VEGFA", intgroup = c("condition", "cell"), returnData = TRUE)
tiff("VEGFAcounts2.tiff")
ggplot(geneCounts, aes(x = cell, y = count, color = condition)) + scale_y_log10() +  geom_beeswarm(cex = 3) + geom_point(size = 3)
dev.off()
geneCounts <- plotCounts(dds, gene = "VEGFA", intgroup = c("condition", "cell"), returnData = TRUE)
tiff("VEGFAcounts3.tiff")
ggplot(geneCounts, aes(x = cell, y = count, color = condition, shape=cell, group = condition, label=rownames(pcaData))) + scale_y_log10() +  geom_beeswarm(cex = 3) + geom_point(size = 3) + geom_line()
dev.off()
tiff("VEGFBcounts.tiff")
plotCounts(dds, gene = "VEGFB", intgroup=c("condition", "cell"))
dev.off()
geneCounts <- plotCounts(dds, gene = "VEGFB", intgroup = c("condition", "cell"), returnData = TRUE)
tiff("VEGFBcounts2.tiff")
ggplot(geneCounts, aes(x = cell, y = count, color = condition)) + scale_y_log10() +  geom_beeswarm(cex = 3) + geom_point(size = 3)
dev.off()
geneCounts <- plotCounts(dds, gene = "VEGFB", intgroup = c("condition", "cell"), returnData = TRUE)
tiff("VEGFBcounts3.tiff")
ggplot(geneCounts, aes(x = cell, y = count, color = condition, shape=cell, group = condition, label=rownames(pcaData))) + scale_y_log10() +  geom_beeswarm(cex = 3) + geom_point(size = 3) + geom_line()
dev.off()
topVarGenes <- head(order(rowVars(assay(rld)), decreasing = TRUE), 60)
mat  <- assay(rld)[ topVarGenes, ]
mat  <- mat - rowMeans(mat)
anno <- as.data.frame(colData(rld)[, c("condition")])
rownames(anno) <- colData[,5]
colnames(anno) <- "gene_name"
tiff("top60heatmap.tiff")
pheatmap(mat, annotation_col = anno, annotation_legend=FALSE, fontsize_row=6)
dev.off()
## this does all cells
res <- results(dds)
mcols(res, use.names = TRUE)
print("summary of new results file")
summary(res)
res <- res[order(res$padj),]
results = as.data.frame(dplyr::mutate(as.data.frame(res), sig=ifelse(res$padj<0.05, "FDR<0.05", "Not Sig")), row.names=rownames(res))
head(results)
write.csv(results, "resultsall.csv", row.names=FALSE)
results <- read.csv("resultsall.csv", row.names=1)
DEgenes_DESeq <- results[which(abs(results$log2FoldChange) > log2(1.5) & results$padj < 0.05),]
tiff("VolcanoPlotZika.tiff")
p = ggplot(results, aes(log2FoldChange, -log10(pvalue))) + geom_point(aes(col =sig)) + scale_color_manual(values = c("red", "black")) + ggtitle("Volcano Plot of DESeq2 analysis")
p + geom_text_repel(data=results[1:10, ], aes(label=rownames(results[1:10, ])))
dev.off()
res.05 <- results(dds, alpha = 0.05)
print("table of padj less then 0.05")
table(res.05$padj < 0.05)
resLFC1 <- results(dds, lfcThreshold=1)
print("table of log fold change greater then 1 with a padj of less then 0.1")
table(resLFC1$padj < 0.1) 
write.csv(res, "resultsall.csv")
print("number of genes that are below pvalue 0.05")
sum(res$pvalue < 0.05, na.rm=TRUE)
print("number of genes that are below 0.05")
sum(!is.na(res$pvalue))
print("number of genes that have padj below 0.1")
sum(res$padj < 0.1, na.rm=TRUE)
resSig <- subset(res, padj < 0.1)
print("top genes based on the highest log2foldchange")
head(resSig[ order(resSig$log2FoldChange), ])
resSigdown <- resSig[ order(resSig$log2FoldChange), ]
write.csv(resSigdown, "Downreg.csv")
resSigup <- resSig[ order(resSig$log2FoldChange, decreasing = TRUE), ]
write.csv(resSigup, "Upreg.csv")
tiff("MAplot.tiff")
plotMA(res, ylim = c(-5, 5))
dev.off()
tiff("Histopvalue")
hist(res$pvalue[res$baseMean > 1], breaks = 0:20/20, col = "grey50", border = "white")
dev.off()
##this gets count files for individual experiments within bigger experiment
countData <- read.csv("gene_count_matrixedited.csv", row.names=1)
countDataF6 <- countData[ ,-c(8:19)]
countDataM6 <- countData[ ,-c(1:6,13:18)]
countDataL6 <- countData[ ,-c(2:13)]
colData <- read.csv("PHENO_DATAk3.csv", row.names=1)
colDataF6 <- colData[-c(7:18), ]
colDataM6 <- colData[-c(1:6, 13:18), ]
colDataL6 <- colData[-c(1:12), ]
##this does K048
print("do all your row names and colnames match with the PHENO_DATA file")
all(rownames(colDataF6) %in% colnames(countDataF6))
countDataF6 <- countDataF6[, rownames(colDataF6)]
print("after renaming columns with PHENO_DATA file do they still match")
all(rownames(colDataF6) == colnames(countDataF6))
dds <- DESeqDataSetFromMatrix(countData = countDataF6,â€ƒcolData = colDataF6, design = ~ condition)
print("total rows in new matrix")
nrow(dds)
dds <- dds[ rowSums(counts(dds)) > 1, ]
print("total number of rows with counts greater then 1")
nrow(dds)
print("Taking rlog of counts for downstream analysis")
rld <- rlog(dds, blind = FALSE)
print("Top three rows from new log matrix")
head(assay(rld), 3)
vsd <- vst(dds, blind = FALSE)
print("Further processing vst of new log matrix")
head(assay(vsd), 3)
dds <- estimateSizeFactors(dds)
print("Running DESeq2 command")
dds <- DESeq(dds)
res <- results(dds)
mcols(res, use.names = TRUE)
print("summary of new results file")
summary(res)
res <- res[order(res$padj),]
results = as.data.frame(dplyr::mutate(as.data.frame(res), sig=ifelse(res$padj<0.05, "FDR<0.05", "Not Sig")), row.names=rownames(res))
head(results)
write.csv(results, "resultscellline3.csv")
results <- read.csv("resultscellline3.csv", row.names=1)
DEgenes_DESeq <- results[which(abs(results$log2FoldChange) > log2(1.5) & results$padj < 0.05),]
tiff("VolcanoPlotcellline3.tiff")
p = ggplot(results, aes(log2FoldChange, -log10(pvalue))) + geom_point(aes(col =sig)) + scale_color_manual(values = c("red", "black")) + ggtitle("Volcano Plot of DESeq2 analysis")
p + geom_text_repel(data=results[1:10, ], aes(label=rownames(results[1:10, ])))
dev.off()
res.05 <- results(dds, alpha = 0.05)
print("table of padj less then 0.05")
table(res.05$padj < 0.05)
resLFC1 <- results(dds, lfcThreshold=1)
print("table of log fold change greater then 1 with a padj of less then 0.1")
table(resLFC1$padj < 0.1) 
write.csv(res, "cellline3results.csv")
print("number of genes that are below pvalue 0.05")
sum(res$pvalue < 0.05, na.rm=TRUE)
print("number of genes that are below 0.05")
sum(!is.na(res$pvalue))
print("number of genes that have padj below 0.1")
sum(res$padj < 0.1, na.rm=TRUE)
resSig <- subset(res, padj < 0.1)
print("top genes based on the highest log2foldchange")
head(resSig[ order(resSig$log2FoldChange), ])
resSigdown <- resSig[ order(resSig$log2FoldChange), ]
write.csv(resSigdown, "cellline3Downreg.csv")
resSigup <- resSig[ order(resSig$log2FoldChange, decreasing = TRUE), ]
write.csv(resSigup, "cellline3Upreg.csv")
res <- lfcShrink(dds, contrast=c("condition","Zika","Mock"), res=res)
topVarGenes <- head(order(rowVars(assay(rld)), decreasing = TRUE), 60)
mat  <- assay(rld)[ topVarGenes, ]
mat  <- mat - rowMeans(mat)
anno <- as.data.frame(colData(rld)[, c("condition")])
rownames(anno) <- colDataF6[,5]
colnames(anno) <- "gene_name"
tiff("top60heatmapcellline3.tiff")
pheatmap(mat, annotation_col = anno, annotation_legend=FALSE, fontsize_row=6)
dev.off()
##this does K054
print("do all your row names and colnames match with the PHENO_DATA file")
all(rownames(colDataM6) %in% colnames(countDataM6))
countDataM6 <- countDataM6[, rownames(colDataM6)]
print("after renaming columns with PHENO_DATA file do they still match")
all(rownames(colDataM6) == colnames(countDataM6))
dds <- DESeqDataSetFromMatrix(countData = countDataM6,â€ƒcolData = colDataM6, design = ~ condition)
print("total rows in new matrix")
nrow(dds)
dds <- dds[ rowSums(counts(dds)) > 1, ]
print("total number of rows with counts greater then 1")
nrow(dds)
print("Taking rlog of counts for downstream analysis")
rld <- rlog(dds, blind = FALSE)
print("Top three rows from new log matrix")
head(assay(rld), 3)
vsd <- vst(dds, blind = FALSE)
print("Further processing vst of new log matrix")
head(assay(vsd), 3)
dds <- estimateSizeFactors(dds)
print("Running DESeq2 command")
dds <- DESeq(dds)
res <- results(dds)
res <- lfcShrink(dds, contrast=c("condition","Zika","Mock"), res=res)
mcols(res, use.names = TRUE)
print("summary of new results file")
summary(res)
res <- res[order(res$padj),]
results = as.data.frame(dplyr::mutate(as.data.frame(res), sig=ifelse(res$padj<0.05, "FDR<0.05", "Not Sig")), row.names=rownames(res))
head(results)
write.csv(results, "resultscellline2.csv")
results <- read.csv("resultscellline2.csv", row.names=1)
DEgenes_DESeq <- results[which(abs(results$log2FoldChange) > log2(1.5) & results$padj < 0.05),]
tiff("VolcanoPlotcellline2.tiff")
p = ggplot(results, aes(log2FoldChange, -log10(pvalue))) + geom_point(aes(col =sig)) + scale_color_manual(values = c("red", "black")) + ggtitle("Volcano Plot of DESeq2 analysis")
p + geom_text_repel(data=results[1:10, ], aes(label=rownames(results[1:10, ])))
dev.off()
res.05 <- results(dds, alpha = 0.05)
print("table of padj less then 0.05")
table(res.05$padj < 0.05)
resLFC1 <- results(dds, lfcThreshold=1)
print("table of log fold change greater then 1 with a padj of less then 0.1")
table(resLFC1$padj < 0.1) 
write.csv(res, "cellline2results.csv")
print("number of genes that are below pvalue 0.05")
sum(res$pvalue < 0.05, na.rm=TRUE)
print("number of genes that are below 0.05")
sum(!is.na(res$pvalue))
print("number of genes that have padj below 0.1")
sum(res$padj < 0.1, na.rm=TRUE)
resSig <- subset(res, padj < 0.1)
print("top genes based on the highest log2foldchange")
head(resSig[ order(resSig$log2FoldChange), ])
resSigdown <- resSig[ order(resSig$log2FoldChange), ]
write.csv(resSigdown, "cellline2Downreg.csv", row.names=1)
resSigup <- resSig[ order(resSig$log2FoldChange, decreasing = TRUE), ]
write.csv(resSigup, "cellline2Upreg.csv")
res <- lfcShrink(dds, contrast=c("condition","Zika","Mock"), res=res)
topVarGenes <- head(order(rowVars(assay(rld)), decreasing = TRUE), 60)
mat  <- assay(rld)[ topVarGenes, ]
mat  <- mat - rowMeans(mat)
anno <- as.data.frame(colData(rld)[, c("condition")])
rownames(anno) <- colDataM6[,5]
colnames(anno) <- "gene_name"
tiff("cellline2top60heatmap.tiff")
pheatmap(mat, annotation_col = anno, annotation_legend=FALSE, fontsize_row=6)
dev.off()
##this does G010
print("do all your row names and colnames match with the PHENO_DATA file")
all(rownames(colDataL6) %in% colnames(countDataL6))
countDataL6 <- countDataL6[, rownames(colDataL6)]
print("after renaming columns with PHENO_DATA file do they still match")
all(rownames(colDataL6) == colnames(countDataL6))
dds <- DESeqDataSetFromMatrix(countData = countDataL6,â€ƒcolData = colDataL6, design = ~ condition)
print("total rows in new matrix")
nrow(dds)
dds <- dds[ rowSums(counts(dds)) > 1, ]
print("total number of rows with counts greater then 1")
nrow(dds)
print("Taking rlog of counts for downstream analysis")
rld <- rlog(dds, blind = FALSE)
print("Top three rows from new log matrix")
head(assay(rld), 3)
vsd <- vst(dds, blind = FALSE)
print("Further processing vst of new log matrix")
head(assay(vsd), 3)
dds <- estimateSizeFactors(dds)
print("Running DESeq2 command")
dds <- DESeq(dds)
res <- results(dds)
res <- lfcShrink(dds, contrast=c("condition","Zika","Mock"), res=res)
mcols(res, use.names = TRUE)
print("summary of new results file")
summary(res)
res <- res[order(res$padj),]
results = as.data.frame(dplyr::mutate(as.data.frame(res), sig=ifelse(res$padj<0.05, "FDR<0.05", "Not Sig")), row.names=rownames(res))
head(results)
write.csv(results, "resultscellline1.csv")
results <- read.csv("resultscellline1.csv", row.names=1)
DEgenes_DESeq <- results[which(abs(results$log2FoldChange) > log2(1.5) & results$padj < 0.05),]
tiff("VolcanoPlotcellline1.tiff")
p = ggplot(results, aes(log2FoldChange, -log10(pvalue))) + geom_point(aes(col =sig)) + scale_color_manual(values = c("red", "black")) + ggtitle("Volcano Plot of DESeq2 analysis")
p + geom_text_repel(data=results[1:10, ], aes(label=rownames(results[1:10, ])))
dev.off()
res.05 <- results(dds, alpha = 0.05)
print("table of padj less then 0.05")
table(res.05$padj < 0.05)
resLFC1 <- results(dds, lfcThreshold=1)
print("table of log fold change greater then 1 with a padj of less then 0.1")
table(resLFC1$padj < 0.1) 
write.csv(res, "cellline1results.csv")
print("number of genes that are below pvalue 0.05")
sum(res$pvalue < 0.05, na.rm=TRUE)
print("number of genes that are below 0.05")
sum(!is.na(res$pvalue))
print("number of genes that have padj below 0.1")
sum(res$padj < 0.1, na.rm=TRUE)
resSig <- subset(res, padj < 0.1)
print("top genes based on the highest log2foldchange")
head(resSig[ order(resSig$log2FoldChange), ])
resSigdown <- resSig[ order(resSig$log2FoldChange), ]
write.csv(resSigdown, "cellline1Downreg.csv", row.names=1)
resSigup <- resSig[ order(resSig$log2FoldChange, decreasing = TRUE), ]
write.csv(resSigup, "cellline1Upreg.csv")
res <- lfcShrink(dds, contrast=c("condition","Zika","Mock"), res=res)
topVarGenes <- head(order(rowVars(assay(rld)), decreasing = TRUE), 60)
mat  <- assay(rld)[ topVarGenes, ]
mat  <- mat - rowMeans(mat)
anno <- as.data.frame(colDataL6(rld)[, c("condition")])
rownames(anno) <- colDataL6[,5]
colnames(anno) <- "gene_name"
tiff("cellline1top60heatmap.tiff")
pheatmap(mat, annotation_col = anno, annotation_legend=FALSE, fontsize_row=6)
dev.off()
sessionInfo()

